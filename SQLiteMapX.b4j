AppType=JavaFX
Build1=Default,b4j.example
File1=clvColumns.bjl
File2=Project.bjl
FileGroup1=Default Group
FileGroup2=Default Group
Group=Default Group
Library1=javaobject
Library2=jcore
Library3=jfx
Library4=json
Library5=jsql
Library6=jxui
Library7=xcustomlistview
Library8=threading
Module1=B4XCodeBlock
Module10=FormExtension
Module11=ManyToManyRelation
Module12=ORMProject
Module13=Parser
Module14=Table
Module2=B4XCodeGenerator
Module3=B4XFile
Module4=B4XForEach
Module5=B4XIfStatement
Module6=B4XSelect
Module7=B4XSub
Module8=B4XWhileLoop
Module9=Column
NumberOfFiles=2
NumberOfLibraries=8
NumberOfModules=14
Version=8.9
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
	#AdditionalJar: sqlite-jdbc-3.32.3.2
#End Region

Sub Process_Globals
	Private fx As JFX
	Private MainForm As Form
	Private xui As XUI 
	Private cmbTables As ComboBox
	Private CurrentProject As ORMProject
	Private lstColumns As CustomListView
	Private CurrentSelectedObject As Object
	Private lblColumnName As B4XView
	Private lblDatabaseColumnType As B4XView
	Private cmbB4XType As ComboBox
	Private chkIsMandatory As B4XView
	Private mSaveProjectPath As String
	Private chkGenerated As B4XView
	Private txtDefaultValue As B4XView
	Private chkUnique As B4XView
	Private chkImmutable As B4XView
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.RootPane.LoadLayout("Project")
	MainForm.Show
	FormExtension.FullScreen(MainForm)
End Sub

'Opens a project from a file.
'Pass the SQLite file to create a new project
Sub OpenDatabase(FilePath As String)
		mSaveProjectPath = File.GetFileParent(FilePath)
		CurrentProject.Initialize
		CurrentProject.LoadProjectSQLite(FilePath)
		MainForm.Title = "Working with database: " & CurrentProject.DatabasePath
		UpdateTableCombobox
		cmbTables.SelectedIndex = 0
		CurrentSelectedObject = CurrentProject.GetTable(cmbTables.Value)
End Sub

Sub UpdateTableCombobox
	For Each t As Table In CurrentProject.Tables
		cmbTables.Items.Add(t.Name)
	Next
	
	For Each m2m As ManyToManyRelation In CurrentProject.ManyToManyRelations
		cmbTables.Items.Add("Many-To-Many Relation: " & m2m.LeftColumn.ParentTable.Name & " <-> " & m2m.RightColumn.ParentTable.Name)
	Next
End Sub

Sub UpdateColumnList
	lstColumns.Clear
	Dim columnList As List = CallSub(CurrentSelectedObject, "getcolumns")
	For Each c As Column In columnList
		lstColumns.Add(CreateListItem(c), c.Name)
	Next
End Sub

Sub CreateListItem(c As Column) As B4XView
	Dim p As B4XView = xui.CreatePanel("")
	p.SetLayoutAnimated(0, 0, 0, lstColumns.AsView.Width, 50)
	p.LoadLayout("clvColumns")
	lblColumnName.Text = c.Name
	lblDatabaseColumnType.Text = c.DatabaseType
	cmbB4XType.Items.AddAll(CurrentProject.ListB4XTypes)
	cmbB4XType.SelectedIndex = CurrentProject.GetB4XTypesIndex(c.B4XType)
	If c.ReferenceTable <> "" Then
		cmbB4XType.Value = "Reference (" & c.ReferenceTable & "." & c.ReferenceColumn & ")"
		cmbB4XType.Enabled = False
	End If
	chkIsMandatory.Checked = c.IsMandatory
	chkGenerated.Checked = c.IsGenerated
	txtDefaultValue.Text = c.DefaultValue
	chkUnique.Checked = c.Unique
	chkImmutable.Checked = c.IsImmutable
	If chkImmutable.Checked Then
		chkImmutable.Enabled = False
	End If
	
	Return p
End Sub

Sub chkUnique_CheckedChange(Checked As Boolean)
	Dim index As Int = lstColumns.GetItemFromView(Sender)
	Dim c As Column = CallSub2(CurrentSelectedObject, "GetColumnByName", lstColumns.GetValue(index))
	c.Unique = Checked
	
	If Checked Then
		Dim chkIsMandatorySibling As B4XView = lstColumns.GetPanel(index).GetView(3)
		chkIsMandatorySibling.Checked = True
	End If
End Sub

Sub cmbB4XType_ValueChanged (Value As Object)
	If lstColumns.IsInitialized Then
		Dim index As Int = lstColumns.GetItemFromView(Sender)
		Dim c As Column = CallSub2(CurrentSelectedObject, "GetColumnByName", lstColumns.GetValue(index))
		Dim ValueString As String = Value
		If ValueString.StartsWith("Reference (") = False Then
			c.B4XType = Value
		End If
	End If
End Sub

Private Sub chkGenerated_CheckedChange(Checked As Boolean)
	Dim index As Int = lstColumns.GetItemFromView(Sender)
	Dim c As Column = CallSub2(CurrentSelectedObject, "GetColumnByName", lstColumns.GetValue(index))
	c.IsGenerated = Checked
	Dim TxtDefaultValueSibling As TextField = lstColumns.GetPanel(index).GetView(6)
	If Checked Then
		TxtDefaultValueSibling.PromptText = "Generate value"
	Else
		TxtDefaultValueSibling.PromptText = "Default value"
	End If
End Sub

Private Sub txtDefaultValue_TextChanged (Old As String, New As String)
	Dim index As Int = lstColumns.GetItemFromView(Sender)
	Dim c As Column = CallSub2(CurrentSelectedObject, "GetColumnByName", lstColumns.GetValue(index))
	c.DefaultValue = New
End Sub

Sub menuMain_Action
	Dim mi As MenuItem = Sender
	Select mi.Text
		Case "Open database"
			Dim DatabasePath As String = GetDatabasePath
			If DatabasePath <> "" Then
				OpenDatabase(DatabasePath)
			End If
		Case "Save project"
			MenuSave
		Case "Save project as..."
			MenuSaveAs
		Case "Export"
			ExportProject
		Case "Close"
			ExitApplication
	End Select
End Sub

Sub MenuSaveAs
	Dim fc As FileChooser
	fc.Initialize
	fc.Title = "Choose a save location"
	fc.SetExtensionFilter("b4orm File", Array As String("*.b4orm"))
	If mSaveProjectPath <> "" Then
		fc.InitialDirectory = File.GetFileParent(mSaveProjectPath)
	End If
	Dim SavePath As String = fc.ShowSave(MainForm)
	If SavePath <> "" Then
		File.WriteString(File.GetFileParent(SavePath), File.GetName(SavePath), CurrentProject.ToJson.ToString)
		mSaveProjectPath = SavePath
	End If
End Sub

Sub MenuSave
	If mSaveProjectPath <> "" Then
		File.WriteString(File.GetFileParent(mSaveProjectPath), File.GetName(mSaveProjectPath), CurrentProject.ToJson.ToString)
	Else
		MenuSaveAs
	End If
End Sub

Sub GetDatabasePath() As String
	Dim fc As FileChooser
	fc.Initialize
	fc.SetExtensionFilter("SQLite Database File", Array As String("*.db", " *.sqlite", " *.sqlite3", " *.db3"))
	fc.Title = "Choose a database file"
	Return fc.ShowOpen(MainForm)
End Sub

Sub ExportProject
	If mSaveProjectPath <> "" Then
		Dim FileMap As Map = B4XCodeGenerator.GenerateB4XCode(CurrentProject)
		For Each ModelFile As B4XFile In FileMap.Values
			File.WriteString(mSaveProjectPath, ModelFile.Name & ".bas", ModelFile.ToString)
		Next
		File.WriteString(mSaveProjectPath, CurrentProject.Name & ".b4j", B4XCodeGenerator.GenerateB4XProjectFile(CurrentProject)) 
	Else
		xui.MsgboxAsync("Please save your project first before exporting.", "Please save first...")	
	End If
End Sub

Sub cmbTables_ValueChanged (Value As Object)
	Dim newValue As String = Value
	If newValue.StartsWith("Many-To-Many Relation: ") Then
		Dim TablePart As String = Regex.Split(": ", newValue)(1)
		Dim LeftTableName As String = Regex.Split(" <-> ", TablePart)(0)
		Dim RightTablenName As String = Regex.Split(" <-> ", TablePart)(1)
		CurrentSelectedObject = CurrentProject.GetManyToManyRelation(LeftTableName, RightTablenName)
	Else
		CurrentSelectedObject = CurrentProject.GetTable(Value)
	End If
	
	UpdateColumnList
End Sub

Private Sub chkImmutable_CheckedChange(Checked As Boolean)
	Dim index As Int = lstColumns.GetItemFromView(Sender)
	Dim c As Column = CallSub2(CurrentSelectedObject, "GetColumnByName", lstColumns.GetValue(index))
	c.IsImmutable = Checked
End Sub